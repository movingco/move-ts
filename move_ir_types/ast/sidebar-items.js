initSidebarItems({"enum":[["Ability","The abilities of a type. Analogous to `move_binary_format::file_format::Ability`."],["BinOp","Enum for binary operators"],["Builtin","Builtin “function”-like operators that often have a signature not expressable in the type system and/or have access to some runtime/storage context"],["Bytecode_",""],["CopyableVal_","Bottom of the value hierarchy. These values can be trivially copyable and stored in statedb as a single entry."],["Exp_","Enum for all expressions"],["FunctionBody","The body of a Move function"],["FunctionCall_","Enum for different function calls"],["FunctionVisibility","Public or internal modifier for a procedure"],["LValue_","Enum for Move lvalues"],["ScriptOrModule","A script or a module, used to represent the two types of transactions."],["Statement_","A [`Block_`] is composed of zero or more “statements,” which can be translated into one or more bytecode instructions."],["StructDefinitionFields","The fields of a Move struct definition"],["Type","The type of a single value"],["UnaryOp","Enum for unary operators"]],"struct":[["BlockLabel_",""],["Block_","A block is composed of a [`BlockLabel`], followed by 0 or more [`Statement`], e.g.: `label b: s_1; ... s_n;`."],["Constant","A constant declaration in a module or script"],["ConstantName","Newtype for the name of a constant"],["FieldIdent_","A fully-qualified field identifier."],["Field_","The field newtype"],["FunctionDependency","An explicit function dependency"],["FunctionName","Newtype for the name of a function"],["FunctionSignature","The signature of a function"],["Function_","A Move function/procedure"],["ImportDefinition","A dependency/import declaration"],["ModuleDefinition","A Move module"],["ModuleDependency","Explicitly given dependency"],["ModuleIdent","Newtype of the address + the module name `addr.m`"],["ModuleName","Newtype for a name of a module"],["NopLabel",""],["Program","A set of Move modules and a Move transaction script"],["QualifiedStructIdent","Identifier for a struct definition. Tells us where to look in the storage layer to find the code associated with the interface"],["Script","The Move transaction script to be executed"],["StructDefinition_","A Move struct"],["StructDependency","An explicit struct dependency"],["StructName","Newtype for the name of a struct"],["TypeVar_","New type that represents a type variable. Used to declare type formals & reference them."],["Var_","Newtype for a variable/local"]],"type":[["Block","A [`Block_`] with a location."],["BlockLabel",""],["Bytecode",""],["BytecodeBlock",""],["BytecodeBlocks",""],["CopyableVal","The type of a value and its location"],["Exp","The type for a `Exp_` and its location"],["ExpFields","The type for fields and their bound expressions"],["Field","A field coupled with source location information"],["FieldIdent",""],["Fields","A field map"],["Function","The type of a Function coupled with its source location information."],["FunctionCall","The type for a function call and its location"],["LValue",""],["Statement","A [`Statement_`] with a location."],["StructDefinition","The type of a StructDefinition along with its source location information"],["StructTypeParameter","A struct type parameter with its constraints and whether it’s declared as phantom."],["TypeVar","The type of a type variable with a location."],["Var","The type of a variable with a location"]]});